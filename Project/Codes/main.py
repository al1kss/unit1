import csv
import os
import random
from colors import *

chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_-+=. '
chars = list(chars)

def validate(value):
    for i in value:
        if i not in "-1234567890":
            return False
    return True

def create_dict(name: str, encrypt=False, integer=False):
    with open(name, mode='r') as f:
        data = f.readlines()

    catalogue = {}
    for item in data:
        data_cleaned = item.strip()
        data_separated = data_cleaned.split(',')

        name = data_separated[0]
        value = data_separated[1]
        if encrypt:
            seed_int = int(data_separated[2])
            random.seed(seed_int)
            key = chars.copy()
            random.shuffle(key)
            decrypted_pswd = ""
            for i in value:
                decrypted_pswd += chars[key.index(i)]
            catalogue[name] = decrypted_pswd, seed_int
        else:
            catalogue[name] = int(value) if integer else value
    return catalogue

def rand_password():
    password = ""
    for i in range(10):
        password += chars[random.randint(0, len(chars) - 1)]
    return password

def __init__(accounts, login_details):
    catalogue = create_dict("database.csv", encrypt=True)

    k = True
    while k:
        rand_seed = random.randint(0, 10000)
        random.seed(rand_seed)

        key = chars.copy()
        random.shuffle(key)

        os.system("clear")
        print(f"""
{cyan}                                        __                                   
{cyan}   ___  ___ ____ ____    _____  _______/ / {blue}__ _  ___ ____  ___ ____ ____ ____
{cyan}  / _ \/ _ `(_-<(_-< |/|/ / _ \/ __/ _  / {blue}/  ' \/ _ `/ _ \/ _ `/ _ `/ -_) __/
{cyan} / .__/\_,_/___/___/__,__/\___/_/  \_,_/ {blue}/_/_/_/\_,_/_//_/\_,_/\_, /\__/_/   
{cyan}/_/                                      {blue}                     /___/          
{end_code}""")
        choice = input(f"\n{cyan}Enter your choice [{blue}0{cyan} - to return, {blue}1{cyan} - to add, {blue}2{cyan} - to delete, {blue}3{cyan} - to view]: {end_code}\n").lower()
        if choice == '0':
            k = False

        elif choice == "1":
            name = input(f"{cyan}Enter username: {end_code}")
            if name in catalogue:
                print(f"{red}This password is in the database: {LIGHT_PURPLE}{name} - {green}{catalogue[name][0]}{end_code}")
                if input(f"{cyan}Do you want to overwrite it? [y/n]: {end_code}").lower() == "y":
                    password = input(f"{green}Enter your new password [a - autogenerated pwd, any other for your own password]: {end_code}")
                    if password == "a":
                        password = rand_password()
                        print(f"\n{yellow}Your password: {green}{password}{end_code}\n")

                    catalogue[name] = password, rand_seed
                    with open("database.csv", mode='w', newline='') as f:
                        writer = csv.writer(f)
                        for name, value in catalogue.items():
                            random.seed(value[1])
                            key = chars.copy()
                            random.shuffle(key)

                            encrypted_password = ""
                            for i in value[0]:
                                encrypted_password += key[chars.index(i)]
                            writer.writerow([name, encrypted_password, value[1]])
                    print(f"{green}Password successfully overwritten!{end_code}")
                else:
                    continue
            else:
                password = input(f"{green}Enter your password: [a - autogenerated pwd, any other for your own password]{end_code}")
                if password == "a":
                    password = rand_password()
                    print(f"\n{yellow}Your password: {green}{password}{end_code}\n")
                encrypted_password = ""
                for i in password:
                    encrypted_password += key[chars.index(i)]

                with open("database.csv", mode='a', newline='') as f:
                    writer = csv.writer(f)
                    writer.writerow([name, encrypted_password, rand_seed])

                catalogue[name] = password, rand_seed
                print(f"{green}New password successfully added!{end_code}")

                # Update the dictionaries in the second code
                login_details[name] = (password, rand_seed)
                accounts[name] = 0

        elif choice == '2':
            for line_no, name in enumerate(catalogue):
                print(f"{line_no + 1}. {cyan}{name}{end_code}")
            name_to_delete = input(f"{LIGHT_PURPLE}Enter the number of account you want to delete: {end_code}")

            if validate(name_to_delete) and int(name_to_delete) <= len(catalogue):
                name = int(name_to_delete)
                name_to_delete = list(catalogue.keys())[name - 1]

                if name_to_delete in catalogue:
                    del catalogue[name_to_delete]

                    with open("database.csv", mode='w', newline='') as f:
                        writer = csv.writer(f)
                        for name, value in catalogue.items():
                            random.seed(value[1])
                            key = chars.copy()
                            random.shuffle(key)
                            encrypted_password = ""
                            for i in value[0]:
                                encrypted_password += key[chars.index(i)]
                            writer.writerow([name, encrypted_password, value[1]])
                    print(f"{green}Account deleted successfully!{end_code}")
                else:
                    print(f"{red}Account not found{end_code}")
            else:
                print(f"{red}Invalid account number{end_code}")

        elif choice == '3':

            if input(f"{blue}Re-enter password: {end_code}") == login_details["notAdminTrustMe"][0]:
                print("\n")

                print(f"{'#':<10}{'Account':<20}{'Password':<20}")  # _______ :< is used to change width
                for line_no, name in enumerate(catalogue):
                    print(f"{line_no + 1:<10}{cyan}{name:<20}{green}{catalogue[name][0]:<20}{end_code}")

                if input(f"\n{blue}Do you want to update a password [y/n]: {end_code}").lower() == "y":
                    name_to_delete = input(f"{LIGHT_PURPLE}Enter the number of account: {end_code}")

                    if validate(name_to_delete) and int(name_to_delete) <= len(catalogue) and len(name_to_delete) > 0:
                        name = int(name_to_delete)
                        name1 = list(catalogue.keys())[name - 1]

                        if name1 in catalogue:
                            password = input(f"{green}Enter your password: [a - autogenerated pwd, any other for your own password]{end_code}")
                            if password == "a":
                                password = rand_password()
                                print(f"\n{yellow}Your password: {green}{password}{end_code}\n")

                            catalogue[name1] = password, rand_seed
                            with open("database.csv", mode='w', newline='') as f:
                                writer = csv.writer(f)
                                for name, value in catalogue.items():
                                    random.seed(value[1])
                                    key = chars.copy()
                                    random.shuffle(key)

                                    encrypted_password = ""
                                    for i in value[0]:
                                        encrypted_password += key[chars.index(i)]
                                    writer.writerow([name, encrypted_password, value[1]])
                            print(f"{green}Password updated successfully!{end_code}")
                        else:
                            print(f"{red}Account not found{end_code}")
                    else:
                        print(f"{red}Invalid account number{end_code}")
                else:
                    print(f"{red}Invalid input{end_code}")
        else:
                print(f"{red}Something went wrong{end_code}")

accounts = create_dict("accounts.csv", False, True)
login_details = create_dict("database.csv", True)